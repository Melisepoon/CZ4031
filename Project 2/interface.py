from PyQt5 import uic
from PyQt5.QtWidgets import *
from PyQt5.QtGui import (QPixmap)
from PyQt5.QtCore import Qt
#from qt_material import apply_stylesheet

class UI(QMainWindow):
    def __init__(self):
        super(UI, self).__init__()
        # load UI from file (generated by Qt Designer
        uic.loadUi("main.ui", self)
        # link to UI widgets
        self.input_sql = self.findChild(QTextEdit, "input_query")
        self.label_qep = self.findChild(QScrollArea, "text_plan")
        self.btn_analyse = self.findChild(QPushButton, "btn_analyse")
        self.btn_clear = self.findChild(QPushButton, "btn_clear")
        self.list_database = self.findChild(QComboBox, "combo_databases")
        self.tree_attrs = self.findChild(QTreeWidget, "tree_attrs")
        self.image_scroll = self.findChild(QScrollArea, "image_scroll")
        self.btn_back = self.findChild(QPushButton, "btn_back")
        self.btn_next = self.findChild(QPushButton, "btn_next")
        self.db_setting = self.findChild(QLabel, "db_setting")

        # init widgets
        self.tree_attrs.setHeaderLabels(["Schema"])
        self.btn_clear.clicked.connect(self.clear)
        self.list_database.currentIndexChanged.connect(self._onDatabaseChanged)
        self.tree_attrs.itemDoubleClicked.connect(self._onSchemaItemDoubleClicked)
    
    def showError(self, errMessage, execption=None):
        dialog = QMessageBox()
        dialog.setStyleSheet("QLabel{min-width: 300px;}");
        dialog.setWindowTitle("Error Message")
        dialog.setText(errMessage)
        if execption is not None:
            dialog.setDetailedText(str(execption))
        dialog.setStandardButtons(QMessageBox.Ok)
        dialog.exec_()

    def clear(self):
        self.input_sql.setPlainText("")
        text_label = QLabel()
        text_label.setText("")
        self.label_qep.setWidget(text_label)
        image_label = QLabel()
        image_label.setPixmap(QPixmap(None))
        self.image_scroll.setWidget(image_label)
        self.db_setting.setText("")
        
    def readInput(self):
        return self.input_sql.toPlainText()
    
    def setInput(self, text):
        self.input_sql.setPlainText(text)
    
    def setResult(self, result, others):
        text_label = QLabel()
        text_label.setWordWrap(True)
        text_label.setMinimumWidth(400)
        text_label.setText(result)
        # self.label_qep.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.label_qep.setWidget(text_label)
        final_str = ""
        for i in others[0]:
            final_str += f'{i[0]} : {i[1]}'
            final_str += "\n"
        final_str += "Cost: " + str(int(others[-1]))
        self.db_setting.setMinimumWidth(200)
        self.db_setting.setText(final_str)
            
    def setSchema(self, schema=None):
        self.tree_attrs.clear()
        if schema is None:
            return
        for table in schema:
            table_item = QTreeWidgetItem([table])
            for attr in schema[table]:
                attr_item =  QTreeWidgetItem([attr])
                table_item.addChild(attr_item)  
            self.tree_attrs.addTopLevelItem(table_item)
    
    def setImage(self, image_data = None):
        if image_data == None:
            print("No image")
            return
        image_label = QLabel()
        image_label.setPixmap(QPixmap(image_data))

        self.image_scroll.setWidget(image_label)

            
    # callback setter
    def setOnAnalyseClicked(self, callback):
        if callback:
            self.btn_analyse.clicked.connect(callback)
        
    def setOnDatabaseChanged(self, callback):
        self.cb_db_changed = callback
        
    def setListDatabase(self, list_db=["TPC-H"]):
        self.list_database.clear()
        self.list_database.addItems(list_db)

    def setOnBackClicked(self, callback):
        self.clear
        if callback:
            self.btn_back.clicked.connect(callback)

    def setOnNextClicked(self, callback):
        self.clear
        if callback:
            self.btn_next.clicked.connect(callback)

            
    # private events handling 
    def _onDatabaseChanged(self, cur_index):
        if hasattr(self, "cb_db_changed"):
            self.cb_db_changed()
        
    def _onSchemaItemDoubleClicked(self, item, col):
        # append item text to input text area
        self.setInput( f"{self.readInput()} {item.text(col)} ") 

        